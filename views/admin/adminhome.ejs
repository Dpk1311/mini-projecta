<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.15/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/easyinvoice/dist/easyinvoice.min.js"></script>
    <title>Admin Dashboard</title>
</head>

<body class="bg-gray-100">
    <%- include('adminpartials/navbar') %>
        <%# include('adminpartials/sidebar') %>
            <div class="flex items-center justify-center">
                <div class="w-full mx-auto py-16">
                    <div class="flex">
                        <div class="w-1/2 py-4 px-8 bg-white shadow-lg rounded-lg my-20 mx-7">
                            <div>
                                <h2 class="text-gray-800 text-3xl font-bold text-center">Total Orders</h2>
                                <p class="mt-2 text-gray-600 text-lg font-semibold text-center">
                                    <%= totalOrders %>
                                </p>
                            </div>

                        </div>
                        <div class="w-1/2 py-4 px-8 bg-white shadow-lg rounded-lg my-20 mx-7">
                            <div>
                                <h2 class="text-gray-800 text-3xl font-bold text-center">Total Sales</h2>
                                <p class="mt-2 text-gray-600 text-lg font-semibold text-center">
                                    â‚¹ <%= totalSales %>
                                </p>
                            </div>

                        </div>
                        <div class="w-1/2 py-4 px-8 bg-white shadow-lg rounded-lg my-20 mx-7">
                            <div>
                                <h2 class="text-gray-800 text-3xl font-bold text-center">Total Users</h2>
                                <p class="mt-2 text-gray-600 text-lg font-semibold text-center">
                                    <%= totaluser %>
                                </p>
                            </div>

                        </div>
                    </div>

                    <span id="orderCounts" hidden><%- orderCounts %></span>
                    <span id="dates" hidden><%- lastSevenDays %></span>
                    <span id="monthly" hidden><%- monthly %></span>

                    <span id="Status" hidden> <%- order %></span>

                    <%# orderPending.forEach(element=> {%>
                        <span id="orderPending" hidden><%- orderPending.count %></span>
                        <span id="orderShipped" hidden><%- orderShipped.count %></span>
                        <span id="orderReturned" hidden><%- orderReturned.count %></span>
                        <span id="orderDelivered" hidden><%- orderDelivered.count %></span>
                        <span id="orderCancelled" hidden><%- orderCancelled.count %></span>
                        <%# }); %>



                            </span>

                            <!-- Chart container -->
                            <div class="bg-white p-3 shadow-sm rounded-sm mx-10">
                                <div class="flex flex-row justify-between">
                                    <!-- First Chart -->
                                    <div class=" p-4  mx-auto w-2/4 shadow-md rounded-lg">
                                        <p class="font-bold">Last 7 days order</p>
                                        <canvas id="myChart1" class="w-full h-auto"></canvas>
                                    </div>

                                    <!-- Second Chart -->
                                    <div class=" p-4  mx-auto w-2/4 shadow-md rounded-lg">
                                        <p class="font-bold">Last 30 days order</p>
                                        <canvas id="myChart2" class="w-full h-auto"></canvas>
                                    </div>
                                    <!-- Third Chart -->
                                    <div class=" p-4   shadow-md rounded-lg">
                                        <p class="font-bold">Order Status</p>
                                        <canvas id="myChart3"></canvas>
                                    </div>
                                </div>
                            </div>
                            <%# console.log(pdflink); %>
                                <div class="flex items-center justify-center my-3">
                                    <label for="fromDate" class="mr-2">From:</label>
                                    <input type="date" id="fromDate" name="fromDate"
                                        class="border border-gray-300 px-2 py-1 rounded-md">
                                    <label for="toDate" class="ml-4 mr-2">To:</label>
                                    <input type="date" id="toDate" name="toDate"
                                        class="border border-gray-300 px-2 py-1 rounded-md">
                                    <button id="downloadButton"
                                        class="ml-4 px-4 py-2 bg-blue-500 text-white rounded-md">Download
                                        Report</button>
                                    <a href="/salesreportpdf/<%= pdflink %>" download><button
                                            class="ml-4 px-4 py-2 bg-red-500 text-white rounded-md">Download
                                            Report</button></a>
                                </div>

                </div>
            </div>
            <script>

                document.getElementById('downloadButton').addEventListener('click', function () {
                    // Get selected dates
                    const fromDate = document.getElementById('fromDate').value;
                    const toDate = document.getElementById('toDate').value;

                    // Validate date inputs
                    const fromDateObj = new Date(fromDate);
                    const toDateObj = new Date(toDate);

                    // Get current date
                    const currentDate = new Date();

                    // Check if the selected 'From' date is greater than the current date
                    if (fromDateObj > currentDate) {
                        alert('The "From" date cannot be in the future.');
                        return;
                    }

                    // Check if the selected 'To' date is less than the current date
                    if (toDateObj < currentDate) {
                        alert('The "To" date cannot be in the past.');
                        return;
                    }

                    // Check if both dates are selected
                    if (!fromDate || !toDate) {
                        alert('Please select both "From" and "To" dates.');
                        return;
                    }

                    // Construct URL with date parameters
                    const url = `/downloadExcel?fromDate=${fromDate}&toDate=${toDate}`;

                    // Fetch the Excel file
                    fetch(url)
                        .then(response => {
                            if (!response.ok) {
                                // Display a message if there is no data
                                alert('No data available for the selected date range.');
                                throw new Error('No data available.');
                            }
                            return response.blob();
                        })
                        .then(blob => {
                            const url = window.URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            a.href = url;
                            a.download = 'OrdersData.xlsx';
                            a.click();
                        })
                        .catch(error => {
                            // Handle any errors that occurred during the fetch
                            console.error('Fetch error:', error);
                        });
                });


            </script>

            <script>
                const orderPending = document.getElementById('orderPending').textContent
                const orderCancelled = document.getElementById('orderCancelled').textContent
                const orderDelivered = document.getElementById('orderDelivered').textContent
                const orderReturned = document.getElementById('orderReturned').textContent
                const orderShipped = document.getElementById('orderShipped').textContent
                console.log('pending is', orderPending);
                console.log('pending is', orderCancelled);
                console.log('pending is', orderDelivered);
                console.log('pending is', orderReturned);
                console.log('pending is', orderShipped);

            </script>




            <script>
                const orderCounts = document.getElementById('orderCounts').textContent.split(',')
                console.log('wcercevc', orderCounts);
                let dates = document.getElementById('dates').textContent.split(',');
                // console.log(dates);
                // const Status = document.getElementById('Status').textContent
                // console.log('Status', Status);



                const ctx = document.getElementById('myChart1');
                const data = {
                    labels: dates,
                    datasets: [{
                        label: 'Number of Orders',
                        data: orderCounts,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 159, 64, 0.2)',
                            'rgba(255, 205, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(201, 203, 207, 0.2)'
                        ],
                        borderColor: [
                            'rgb(255, 99, 132)',
                            'rgb(255, 159, 64)',
                            'rgb(255, 205, 86)',
                            'rgb(75, 192, 192)',
                            'rgb(54, 162, 235)',
                            'rgb(153, 102, 255)',
                            'rgb(201, 203, 207)'
                        ],
                        borderWidth: 1
                    }]
                };

                const config = {
                    type: 'bar',
                    data: data,
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    max: Math.max(...orderCounts) // Set the max property to the maximum value in orderCounts
                                }

                            }
                        }
                    }
                };

                new Chart(ctx, config); // Create the chart


                const monthly = document.getElementById('monthly').textContent.split(',')
                // console.log('monthly', monthly);

                const chart2 = document.getElementById('myChart2');
                const data1 = {
                    labels: monthly,
                    datasets: [{
                        label: 'Number of Orders',
                        data: orderCounts,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 159, 64, 0.2)',
                            'rgba(255, 205, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(201, 203, 207, 0.2)'
                        ],
                        borderColor: [
                            'rgb(255, 99, 132)',
                            'rgb(255, 159, 64)',
                            'rgb(255, 205, 86)',
                            'rgb(75, 192, 192)',
                            'rgb(54, 162, 235)',
                            'rgb(153, 102, 255)',
                            'rgb(201, 203, 207)'
                        ],
                        borderWidth: 2
                    }]
                };

                const config1 = {
                    type: 'bar',
                    data: data1,
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,

                            },
                        }
                    }
                };

                new Chart(chart2, config1);

                const myChart3 = document.getElementById('myChart3')
                const data3 = {
                    labels: [
                        'Delivered',
                        'Pending',
                        'Cancelled',
                        'Returned',
                        'Shipped'
                    ],
                    datasets: [{
                        label: 'Order Status',
                        data: [orderDelivered, orderPending, orderCancelled, orderReturned, orderShipped],
                        backgroundColor: [
                            'rgb(0, 255, 0)',
                            'rgb(54, 162, 235)',
                            'rgb(255, 0, 0)',
                            'rgb(255, 205, 86)',
                            'rgb(255, 205, 255)',

                        ],
                        hoverOffset: 4
                    }]
                };

                const config3 = {
                    type: 'doughnut',
                    data: data3,
                };

                new Chart(myChart3, config3)
            </script>




            <script>


                const name = document.getElementById('nameinvoice').textContent
                console.log('name_is', name)
                const street = document.getElementById('addressstreet').textContent
                console.log('address_is', street)
                const city = document.getElementById('addresscity').textContent
                console.log('address_is', city)
                const state = document.getElementById('addressstate').textContent
                console.log('address_is', state)
                const pincode = document.getElementById('addresspincode').textContent
                console.log('address_is', pincode)
                const productnames = document.querySelectorAll('.productname');
                const productquantitys = document.querySelectorAll('.productquantity')
                const productprices = document.querySelectorAll('.productprice')

                const productsnamearray = []
                const productsquantityarray = []
                const productspricearray = []

                productnames.forEach(element => {
                    const productnames = element.value
                    productsnamearray.push(productnames)
                });
                productquantitys.forEach(element => {
                    const productquantitys = element.value
                    productsquantityarray.push(productquantitys)
                })

                productprices.forEach(element => {
                    const productprices = element.value
                    productspricearray.push(productprices)
                })
                console.log('product name', productsnamearray);
                console.log('product_quantity', productsquantityarray);
                console.log('product_price', productspricearray);


                function downloadInvoice() {
                    const orderData = {
                        currency: 'USD',
                        taxNotation: 'vat', // or gst
                        marginTop: 25,
                        marginRight: 25,
                        marginLeft: 25,
                        marginBottom: 25,
                        logo: 'https://www.example.com/logo.png', // Optional
                        background: 'https://www.example.com/background.png', // Optional
                        sender: {
                            company: 'Your Company',
                            address: '123 Main Street',
                            zip: '12345',
                            city: 'City',
                            country: 'Country',
                            phone: '123456789',
                            email: 'info@yourcompany.com',
                        },
                        invoiceNumber: '2023001',
                        invoiceDate: '2023-01-01',
                        client: {
                            company: 'Client Company',
                            address: '456 Client Street',
                            zip: '54321',
                            city: 'Client City',
                            country: 'Client Country',
                            phone: '987654321',
                            email: 'client@example.com',
                        },
                        products: [
                            {
                                quantity: 2,
                                description: 'Product A',
                                tax: 10,
                                price: 50,
                            },
                            {
                                quantity: 1,
                                description: 'Product B',
                                tax: 5,
                                price: 30,
                            },
                        ],
                        bottomNotice: 'Thank you for your business!',
                    };

                    // Add client name to each product
                    orderData.products.forEach(product => {
                        product.clientName = orderData.client.company;
                    });

                    easyinvoice.createInvoice(orderData, function (result) {
                        easyinvoice.download('invoice.pdf', result.pdf);
                    });
                }




            </script>


</body>

</html>